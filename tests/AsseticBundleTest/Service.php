<?php
namespace AsseticBundleTest;

use AsseticBundle;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-17 at 11:53:23.
 */
class Service extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AsseticBundle\Service
     */
    protected $object;

    /**
     * @var array
     */
    protected $defaultOptions = array();

    /**
     * @var AsseticBundle\Configuration
     */
    protected $configuration;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->defaultOptions = array(
            'webPath' => TEST_PUBLIC_DIR,
            'routes' => array(
                'home' => array(
                    '@base_css',
                    '@base_js',
                ),
            ),
            'modules' => array(
                'test_application' => array(
                    'root_path' => TEST_ASSETS_DIR,
                    'collections' => array(
                        'base_css' => array(
                            'assets' => array(
                                'css/global.css',
                            ),
                            'filters' => array(
                                'CssRewriteFilter' => array(
                                    'name' => 'Assetic\Filter\CssRewriteFilter'
                                )
                            ),
                            'options' => array(),
                        ),
                        'base_js' => array(
                            'assets' => array(
                                'js/test.js',
                            )
                        ),
                        'base_images' => array(
                            'assets' => array(
                                'images/*.png',
                            ),
                            'options' => array(
                                'move_raw' => true,
                            )
                        ),
                    ),
                ),
            )
        );

        $this->configuration = new AsseticBundle\Configuration($this->defaultOptions);
        $this->object = new AsseticBundle\Service($this->configuration);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {}

    public function testSetRouterName() {
        $result = $this->object->setRouteName('some+name');
        $this->assertNull($result);
    }

    public function testGetRouterName() {
        $value = $this->object->getRouteName();
        $this->assertEquals($value, AsseticBundle\Service::DEFAULT_ROUTE_NAME);

        $expected = 'name-router';
        $this->object->setRouteName($expected);
        $value = $this->object->getRouteName();
        $this->assertEquals($value, $expected);
    }

    public function testSetAssetManager() {
        $value = new \Assetic\AssetManager();
        $result = $this->object->setAssetManager($value);
        $this->assertNull($result);
        $this->assertSame($value, $this->object->getAssetManager());
    }

    public function testGetAssetManager() {
        $result = $this->object->getAssetManager();
        $this->assertInstanceOf('Assetic\AssetManager', $result);
    }

    public function testSetFilterManager() {
        $value = new \Assetic\FilterManager();
        $result = $this->object->setFilterManager($value);
        $this->assertNull($result);
        $this->assertSame($value, $this->object->getFilterManager());
    }

    public function testGetFilterManager() {
        $result = $this->object->getFilterManager();
        $this->assertInstanceOf('Assetic\FilterManager', $result);
    }

    public function testSetControllerName() {
        $expected = 'some-name';
        $value = $this->object->setControllerName($expected);
        $this->assertNull($value);
        $this->assertEquals($expected, $this->object->getControllerName());
    }

    public function testGetControllerName() {
        $value = $this->object->getControllerName();
        $this->assertNull($value);
    }

    public function testSetActionName() {
        $expected = 'some-name';
        $value = $this->object->setActionName($expected);
        $this->assertNull($value);
        $this->assertEquals($expected, $this->object->getActionName());
    }

    public function testGetActionName() {
        $value = $this->object->getActionName();
        $this->assertNull($value);
    }

    public function testInitLoadedModules() {
        $loadModules = array(
            'test_application' => 'test_application',
        );
        $this->object->initLoadedModules($loadModules);
        $assetManager = $this->object->getAssetManager();
        $this->assertTrue($assetManager->has('base_css'));
        $this->assertTrue($assetManager->has('base_js'));
    }
}